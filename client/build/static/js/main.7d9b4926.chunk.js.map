{"version":3,"sources":["components/layouts/Navbar.js","components/Helper.js","components/OptionPopup.js","components/Home.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","className","to","id","Helper","serverURL","window","location","origin","showNotification","message","type","iziToast","show","title","messageSize","position","theme","pauseOnHover","timeout","progressBarColor","color","messageColor","icon","textEllipsis","str","length","ending","substring","OptionPopup","props","useEffect","Modal","onHide","handleClose","Header","closeButton","Title","Body","style","marginBottom","checked","options","processRootUrlOnly","onClick","e","value","setOptions","localStorage","setItem","class","searchStrength","name","target","Home","useState","site","setSite","setCurrentCopiedText","isLoading","setIsLoading","openOptionPopup","setOpenOptionPopup","hideBottomPart","setHideBottomPart","results","setResults","getItem","toggleOptionPopup","startScrapOnClickHandler","a","Axios","post","response","data","status","undefined","result","resultArray","forEach","singleSite","index","emails","email","resultObj","replace","push","console","log","selectNode","node","range","document","createRange","selectNodeContents","select","getSelection","removeAllRanges","addRange","active","spinner","text","onChange","placeholder","rows","disabled","condition","OverlayTrigger","placement","overlay","table","querySelector","execCommand","copyAllOnClickHandler","width","map","key","onCopy","colSpan","Error","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7d9b4926.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"izitoast/dist/css/iziToast.css\";\n\nconst Navbar = () => {\n  return (\n    <React.Fragment>\n      <nav className=\"navbar default-layout-navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row\">\n        <div className=\"text-center navbar-brand-wrapper d-flex align-items-center justify-content-center\">\n          <Link className=\"navbar-brand brand-logo\" to=\"/\">\n            <h3>Email scraper</h3>\n          </Link>\n          <Link className=\"navbar-brand\" to=\"/\">\n            <h3 className=\"px-3 my-auto\">Email Scraper</h3>\n          </Link>\n        </div>\n        <div className=\"navbar-menu-wrapper d-flex align-items-stretch\">\n          <ul className=\"navbar-nav navbar-nav-right\">\n            <li className=\"nav-item full-screen-link\">\n              {/* eslint-disable-next-line */}\n              <a className=\"nav-link\">\n                <i className=\"mdi mdi-fullscreen\" id=\"fullscreen-button\"></i>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default Navbar;\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.css';\n\nconst showNotification = (message = 'Something went wrong', type = 'error') => {\n    iziToast.show({\n        title: '',\n        message: message,\n        messageSize: 12,\n        position: 'topRight',\n        theme: 'dark',\n        pauseOnHover: true,\n        timeout: 5000,\n        progressBarColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        color: type === 'success' ? '#565c70' : '#565c70',\n        messageColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        icon: type === 'success' ? 'mdi mdi-check' : 'mdi mdi-alert-circle-outline'\n    });\n};\n\nconst textEllipsis = (str, length, ending = '...') => {\n    if (length == null) {\n      length = 100;\n    }\n    if (str.length > length) {\n      return str.substring(0, length - ending.length) + ending;\n    } else {\n      return str;\n    }\n};\n\n\nconst Helper = {\n    serverURL: window.location.origin,\n    showNotification: showNotification,\n    textEllipsis: textEllipsis\n}\n\nexport default Helper;","import React, { useEffect } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst OptionPopup = (props) => {\n  useEffect(() => {}, []);\n\n  return (\n    <React.Fragment>\n      <Modal show={true} onHide={props.handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Search Options</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"col-md-12 grid-margin\">\n            <div className=\"card\">\n              <div className=\"mx-0 row\">\n                <div className=\"col-md-12\">\n                  <div className=\"form-group\" style={{ marginBottom: \"1rem\" }}>\n                    <div className=\"form-check\">\n                      <label className=\"form-check-label\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"form-check-input\"\n                          checked={props.options.processRootUrlOnly}\n                          onClick={(e) => {\n                            let value = !props.options.processRootUrlOnly;\n                            props.setOptions({\n                              ...props.options,\n                              processRootUrlOnly: value,\n                            });\n                            localStorage.setItem(\"processRootUrlOnly\", value);\n                          }}\n                        />{\" \"}\n                        Process Root Url Only <i className=\"input-helper\"></i>{\" \"}\n                        <small className=\"text-muted\">\n                          |{\" \"}\n                          {props.options.processRootUrlOnly\n                            ? \"www.example.com\"\n                            : \"www.example.com/xyz\"}{\" \"}\n                          |\n                        </small>\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"card mt-2\">\n              <div className=\"mx-0 row\">\n                <div className=\"col-md-12\">\n                  <div className=\"form-group\" style={{ marginBottom: \"1rem\" }}>\n                    <div className=\"form-check\">\n                      <label class=\"form-check-label\">\n                        <input\n                          type=\"radio\"\n                          class=\"form-check-input\"\n                          checked={props.options.searchStrength === \"deep\"}\n                          name=\"searchStrength\"\n                          value=\"deep\"\n                          onClick={(e) => {\n                            props.setOptions({\n                              ...props.options,\n                              searchStrength: e.target.value,\n                            });\n                            localStorage.setItem(\"searchStrength\", \"deep\");\n                          }}\n                        />{\" \"}\n                        Advanced Search <i class=\"input-helper\"></i>\n                      </label>\n                    </div>\n                    <div className=\"form-check\">\n                      <label class=\"form-check-label\">\n                        <input\n                          type=\"radio\"\n                          class=\"form-check-input\"\n                          checked={props.options.searchStrength === \"quick\"}\n                          name=\"searchStrength\"\n                          value=\"quick\"\n                          onClick={(e) => {\n                            props.setOptions({\n                              ...props.options,\n                              searchStrength: e.target.value,\n                            });\n                            localStorage.setItem(\"searchStrength\", \"quick\");\n                          }}\n                        />{\" \"}\n                        Quick Search <i class=\"input-helper\"></i>\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default OptionPopup;\n","import React, { useState } from \"react\";\nimport Navbar from \"./layouts/Navbar\";\nimport Helper from \"./Helper\";\nimport Axios from \"axios\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { If } from \"react-if\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport OptionPopup from \"./OptionPopup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport BootStrapTooltip from \"react-bootstrap/Tooltip\";\n\nconst Home = (props) => {\n  const [site, setSite] = useState(\"\");\n  // eslint-disable-next-line\n  const [currentCopiedText, setCurrentCopiedText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [openOptionPopup, setOpenOptionPopup] = useState(false);\n  const [hideBottomPart, setHideBottomPart] = useState(true);\n\n  const [results, setResults] = useState([]);\n  const [options, setOptions] = useState({\n    processRootUrlOnly:\n      localStorage.getItem(\"processRootUrlOnly\") === \"true\" ? true : false,\n    searchStrength: localStorage.getItem(\"searchStrength\")\n      ? localStorage.getItem(\"searchStrength\")\n      : \"deep\",\n  });\n\n  const toggleOptionPopup = () => {\n    setOpenOptionPopup(!openOptionPopup);\n  };\n\n  const startScrapOnClickHandler = async () => {\n    if (site !== \"\") {\n      setIsLoading(true);\n      try {\n        const response = await Axios.post(\"/api/scrap\", {\n          site: site,\n          processRootUrlOnly: options.processRootUrlOnly,\n          searchStrength: options.searchStrength,\n        });\n        setIsLoading(false);\n        if (response.data.status !== 200) {\n          Helper.showNotification(\n            typeof response.data.data.result !== undefined\n              ? response.data.data.result\n              : \"Server error\",\n            \"error\"\n          );\n        } else if (response.data.status === 200) {\n          setHideBottomPart(false);\n          let resultArray = [];\n          response.data.result.forEach((singleSite, index) => {\n            if (singleSite.emails.length) {\n              singleSite.emails.forEach((email, index) => {\n                let resultObj = {\n                  email: email.replace(\"mailto:\", \"\"),\n                  site: singleSite.site,\n                  // site: singleSite.site.replace('www.', '').replace('https://', '').replace('http://', '').replace(/\\/$/, '')\n                };\n                resultArray.push(resultObj);\n              });\n            }\n          });\n          setResults(resultArray);\n        }\n      } catch (error) {\n        setIsLoading(false);\n        console.log(error);\n        Helper.showNotification(\"Server error\", \"error\");\n      }\n    } else {\n      Helper.showNotification(\"Nothing to scrap\", \"error\");\n    }\n  };\n\n  const copyOnClickHandler = (text) => {\n    setCurrentCopiedText(text);\n  };\n\n  const optionOnClickHandler = () => {\n    toggleOptionPopup();\n  };\n\n  const copyAllOnClickHandler = () => {\n    let table = document.querySelector(\"#scrapped-email-table\");\n\n    selectNode(table);\n    document.execCommand(\"copy\");\n  };\n\n  const selectNode = (node) => {\n    let range = document.createRange();\n    range.selectNodeContents(node);\n    let select = window.getSelection();\n    select.removeAllRanges();\n    select.addRange(range);\n  };\n\n  const populateTableRow = () => {\n    if (!results.length) {\n      return (\n        <tr>\n          <td colSpan={4} className=\"text-center text-muted\">\n            No Email Found\n          </td>\n        </tr>\n      );\n    }\n    return results.map((result, index) => {\n      return (\n        <React.Fragment key={index}>\n          <tr>\n            <td> {index + 1} </td>\n            <td>\n              <code>{Helper.textEllipsis(result.email, 100)}</code>{\" \"}\n            </td>\n            <td> {Helper.textEllipsis(result.site, 100)} </td>\n            <td>\n              <CopyToClipboard\n                text={result.email}\n                onCopy={() => copyOnClickHandler(result.email)}\n              >\n                <button className={\"btn btn-rounded btn-icon btn-success\"}>\n                  <i className=\"mdi mdi-content-paste\"></i>\n                </button>\n              </CopyToClipboard>\n            </td>\n          </tr>\n        </React.Fragment>\n      );\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"container-scroller\">\n        <Navbar />\n        <div className=\"container-fluid page-body-wrapper\">\n          <div className=\"main-panel\">\n            <div className=\"content-wrapper\">\n              <div className=\"row\">\n                <div className=\"col-md-12 grid-margin stretch-card\">\n                  <div className=\"card\">\n                    <LoadingOverlay\n                      active={isLoading}\n                      spinner\n                      text=\"Extracting...\"\n                    >\n                      <div className=\"card-body text-center\">\n                        <div className=\"forms-sample\">\n                          <label className=\"text-muted\">\n                            Enter one domain/URL:\n                          </label>\n                          <div className=\"form-group\">\n                            <textarea\n                              id=\"site\"\n                              name=\"site\"\n                              onChange={(e) => {\n                                setSite(e.target.value);\n                              }}\n                              value={site}\n                              className=\"form-control\"\n                              placeholder=\"example.com &#10;example.com &#10;example.com\"\n                              rows=\"6\"\n                            ></textarea>\n                          </div>\n                          <button\n                            type=\"button\"\n                            disabled={isLoading}\n                            className=\"btn btn-gradient-info m-2\"\n                            onClick={optionOnClickHandler}\n                          >\n                            Option\n                          </button>\n                          <button\n                            type=\"button\"\n                            disabled={isLoading}\n                            className=\"btn btn-gradient-primary m-2\"\n                            onClick={startScrapOnClickHandler}\n                          >\n                            Start Extracting{isLoading ? \"...\" : \"\"}\n                          </button>\n                        </div>\n                      </div>\n                    </LoadingOverlay>\n                  </div>\n                </div>\n                <If condition={!hideBottomPart}>\n                  <React.Fragment>\n                    <div className=\"col-md-12 grid-margin stretch-card\">\n                      <div className=\"card\">\n                        <div className=\"card-body text-center\">\n                          <h4 className=\"card-title\">\n                            Email Extracted: {results.length}\n                          </h4>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"col-md-12 grid-margin stretch-card\">\n                      <div className=\"card\">\n                        <div className=\"card-body\">\n                          <div className=\"pt-3 pb-3\">\n                            <div className=\"d-flex flex-column flex-md-row justify-content-md-between\">\n                              <div className=\"d-flex flex-row\">\n                                <OverlayTrigger\n                                  placement={\"top\"}\n                                  overlay={\n                                    <BootStrapTooltip>\n                                      Copy All\n                                    </BootStrapTooltip>\n                                  }\n                                >\n                                  <button\n                                    disabled={!results.length}\n                                    id=\"copy-all-button\"\n                                    className=\"btn btn-inverse-info btn-icon\"\n                                    onClick={() => copyAllOnClickHandler()}\n                                  >\n                                    <i className=\"mdi mdi-content-copy\"></i>\n                                  </button>\n                                </OverlayTrigger>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"table-responsive\">\n                            <table\n                              id=\"scrapped-email-table\"\n                              className=\"table table-striped scrapped-email-table\"\n                            >\n                              <thead>\n                                <tr>\n                                  <th> Sl.No. </th>\n                                  <th> Email </th>\n                                  <th> Site </th>\n                                  <th style={{ width: \"160px\" }}> </th>\n                                </tr>\n                              </thead>\n                              <tbody>{populateTableRow()}</tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </React.Fragment>\n                </If>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <If condition={openOptionPopup}>\n        <OptionPopup\n          handleClose={toggleOptionPopup}\n          options={options}\n          setOptions={setOptions}\n        />\n      </If>\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Error = () => {\n    return (\n        <React.Fragment>\n            <div className=\"container-scroller\">\n                <div className=\"container-fluid page-body-wrapper full-page-wrapper\">\n                    <div className=\"content-wrapper d-flex align-items-center text-center error-page bg-primary\">\n                    <div className=\"row flex-grow\">\n                        <div className=\"col-lg-7 mx-auto text-white\">\n                        <div className=\"row align-items-center d-flex flex-row\">\n                            <div className=\"col-lg-6 text-lg-right pr-lg-4\">\n                            <h1 className=\"display-1 mb-0\">404</h1>\n                            </div>\n                            <div className=\"col-lg-6 error-page-divider text-lg-left pl-lg-4\">\n                            <h2>SORRY!</h2>\n                            <h3 className=\"font-weight-light\">The page you’re looking for was not found.</h3>\n                            </div>\n                        </div>\n                        <div className=\"row mt-5\">\n                            <div className=\"col-12 text-center mt-xl-2\">\n                                <Link className=\"text-white font-weight-medium\" to={'/'}>Back to home</Link>\n                            </div>\n                        </div>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Error;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport './assets/css/App.scss';\nimport Home from './components/Home';\nimport Error from './components/Error';\n\nfunction App() {\n\t\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Home}/>\n\t\t\t\t<Route component={Error}/>\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}