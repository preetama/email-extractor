{"version":3,"sources":["components/layouts/Navbar.js","components/Helper.js","components/OptionPopup.js","components/Home.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","className","to","href","target","id","Helper","serverURL","window","location","origin","showNotification","message","type","iziToast","show","title","messageSize","position","theme","pauseOnHover","timeout","progressBarColor","color","messageColor","icon","textEllipsis","str","length","ending","substring","OptionPopup","props","useEffect","Modal","onHide","handleClose","Header","closeButton","Title","Body","style","marginBottom","checked","options","processRootUrlOnly","onClick","e","value","setOptions","localStorage","setItem","class","searchStrength","name","Home","useState","site","setSite","setCurrentCopiedText","isLoading","setIsLoading","openOptionPopup","setOpenOptionPopup","hideBottomPart","setHideBottomPart","results","setResults","getItem","toggleOptionPopup","startScrapOnClickHandler","a","Axios","post","response","data","status","undefined","result","resultArray","forEach","singleSite","index","emails","email","resultObj","replace","push","console","log","selectNode","node","range","document","createRange","selectNodeContents","select","getSelection","removeAllRanges","addRange","active","spinner","text","onChange","placeholder","rows","disabled","condition","OverlayTrigger","placement","overlay","table","querySelector","execCommand","copyAllOnClickHandler","width","map","key","onCopy","colSpan","Error","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a49d2f99.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'izitoast/dist/css/iziToast.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <nav className=\"navbar default-layout-navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row\">\r\n                <div className=\"text-center navbar-brand-wrapper d-flex align-items-center justify-content-center\">\r\n                    <Link className=\"navbar-brand brand-logo\" to=\"/\">\r\n                        <h3>Email scraper</h3>\r\n                    </Link>\r\n                    <Link className=\"navbar-brand\" to=\"/\">\r\n                        <h3 className=\"px-3 my-auto\">Email Scraper</h3>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar-menu-wrapper d-flex align-items-stretch\">\r\n                    <ul className=\"navbar-nav navbar-nav-right\">\r\n                        <li className=\"nav-item \">\r\n                            {/* eslint-disable-next-line */}\r\n                            <a className=\"nav-link\" href=\"https://github.com/arifszn/email-scraper\" target=\"_blank\">\r\n                                <i className=\"mdi mdi-github-circle\"></i>\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item full-screen-link\">\r\n                            {/* eslint-disable-next-line */}\r\n                            <a className=\"nav-link\">\r\n                                <i className=\"mdi mdi-fullscreen\" id=\"fullscreen-button\"></i>\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item \">\r\n                            {/* eslint-disable-next-line */}\r\n                            <a className=\"nav-link\" href=\"#\">\r\n                                <i className=\"mdi mdi-format-line-spacing\"></i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.css';\n\nconst showNotification = (message = 'Something went wrong', type = 'error') => {\n    iziToast.show({\n        title: '',\n        message: message,\n        messageSize: 12,\n        position: 'topRight',\n        theme: 'dark',\n        pauseOnHover: true,\n        timeout: 5000,\n        progressBarColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        color: type === 'success' ? '#565c70' : '#565c70',\n        messageColor: type === 'success' ? '#00ffb8' : '#ffafb4',\n        icon: type === 'success' ? 'mdi mdi-check' : 'mdi mdi-alert-circle-outline'\n    });\n};\n\nconst textEllipsis = (str, length, ending = '...') => {\n    if (length == null) {\n      length = 100;\n    }\n    if (str.length > length) {\n      return str.substring(0, length - ending.length) + ending;\n    } else {\n      return str;\n    }\n};\n\n\nconst Helper = {\n    serverURL: window.location.origin,\n    showNotification: showNotification,\n    textEllipsis: textEllipsis\n}\n\nexport default Helper;","import React, { useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\n\nconst OptionPopup = (props) => {\n    useEffect(() => {\n\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Modal show={true} onHide={props.handleClose}>\n                <Modal.Header closeButton>\n                <Modal.Title>Search Options</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"col-md-12 grid-margin\">\n                        <div className=\"card\">\n                            <div className=\"mx-0 row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"form-group\" style={{ marginBottom: '1rem' }}>\n                                        <div className=\"form-check\">\n                                            <label className=\"form-check-label\">\n                                                <input type=\"checkbox\" className=\"form-check-input\" checked={props.options.processRootUrlOnly}  onClick={(e) => {\n                                                    let value = !props.options.processRootUrlOnly;\n                                                    props.setOptions({...props.options, processRootUrlOnly:  value});\n                                                    localStorage.setItem(\"processRootUrlOnly\", value);\n                                                }} /> Process Root Url Only <i className=\"input-helper\"></i> <small className=\"text-muted\">| {props.options.processRootUrlOnly ? 'www.example.com' : 'www.example.com/xyz'} |</small>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card mt-2\">\n                            <div className=\"mx-0 row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"form-group\" style={{ marginBottom: '1rem' }}>\n                                        <div className=\"form-check\">\n                                            <label class=\"form-check-label\">\n                                                <input type=\"radio\" class=\"form-check-input\" checked={props.options.searchStrength === 'deep'} name=\"searchStrength\" value=\"deep\" onClick={(e) => { \n                                                    props.setOptions({...props.options, searchStrength: e.target.value });\n                                                    localStorage.setItem(\"searchStrength\", \"deep\");\n                                                }}/> Deep Search <i class=\"input-helper\"></i>\n                                            </label>\n                                        </div>\n                                        <div className=\"form-check\">\n                                            <label class=\"form-check-label\">\n                                                <input type=\"radio\" class=\"form-check-input\" checked={props.options.searchStrength === 'quick'} name=\"searchStrength\" value=\"quick\" onClick={(e) => { \n                                                    props.setOptions({...props.options, searchStrength: e.target.value });\n                                                    localStorage.setItem(\"searchStrength\", \"quick\");\n                                                }}/> Quick Search <i class=\"input-helper\"></i>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default OptionPopup;","import React, { useState } from 'react';\r\nimport Navbar from './layouts/Navbar';\r\nimport Helper from './Helper';\r\nimport Axios from 'axios';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport { If } from 'react-if';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport OptionPopup from './OptionPopup';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport BootStrapTooltip from 'react-bootstrap/Tooltip';\r\n\r\nconst Home = (props) => {\r\n    const [site, setSite] = useState('');\r\n    // eslint-disable-next-line\r\n    const [currentCopiedText, setCurrentCopiedText] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [openOptionPopup, setOpenOptionPopup] = useState(false);\r\n    const [hideBottomPart, setHideBottomPart] = useState(true);\r\n\r\n    const [results, setResults] = useState([]);\r\n    const [options, setOptions] = useState({\r\n        processRootUrlOnly: localStorage.getItem(\"processRootUrlOnly\") === 'true' ? true : false,\r\n        searchStrength: localStorage.getItem(\"searchStrength\") ? localStorage.getItem(\"searchStrength\") : 'deep',\r\n    });\r\n\r\n    const toggleOptionPopup = () => {\r\n        setOpenOptionPopup(!openOptionPopup);\r\n    }\r\n\r\n    const startScrapOnClickHandler = async () => {\r\n        if (site !== '') {\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await Axios.post('/api/scrap', {\r\n                    site: site,\r\n                    processRootUrlOnly: options.processRootUrlOnly,\r\n                    searchStrength: options.searchStrength,\r\n                });\r\n                setIsLoading(false);\r\n                if (response.data.status !== 200) {\r\n                    Helper.showNotification(typeof response.data.data.result !== undefined ? response.data.data.result : 'Server error', 'error');\r\n                } else if (response.data.status === 200) {\r\n                    setHideBottomPart(false);\r\n                    let resultArray = [];\r\n                    response.data.result.forEach((singleSite, index) => {\r\n                        if (singleSite.emails.length) {\r\n                            singleSite.emails.forEach((email, index) => {\r\n                                let resultObj = {\r\n                                    email    : email.replace('mailto:', ''),\r\n                                    site: singleSite.site\r\n                                    // site: singleSite.site.replace('www.', '').replace('https://', '').replace('http://', '').replace(/\\/$/, '')\r\n                                };\r\n                                resultArray.push(resultObj);\r\n                            });\r\n                        }\r\n                    });\r\n                    setResults(resultArray);\r\n                }\r\n            } catch (error) {\r\n                setIsLoading(false);\r\n                console.log(error);\r\n                Helper.showNotification('Server error', 'error');\r\n            }\r\n            \r\n        } else {\r\n            Helper.showNotification('Nothing to scrap', 'error');\r\n        }\r\n    }\r\n\r\n    const copyOnClickHandler = (text) => {\r\n        setCurrentCopiedText(text);\r\n    }\r\n\r\n    const optionOnClickHandler = () => {\r\n        toggleOptionPopup();\r\n    }\r\n\r\n    const copyAllOnClickHandler = () => {\r\n        let table = document.querySelector('#scrapped-email-table');\r\n        \r\n        selectNode(table);\r\n        document.execCommand('copy')\r\n    }\r\n\r\n    const selectNode = (node) => {\r\n        let range  =  document.createRange();\r\n        range.selectNodeContents(node)\r\n        let select =  window.getSelection()\r\n        select.removeAllRanges()\r\n        select.addRange(range)\r\n    }\r\n    \r\n\r\n    const populateTableRow = () => {\r\n        if (!results.length) {\r\n            return (\r\n                <tr>\r\n                    <td colSpan={4} className=\"text-center text-muted\">No Email Found</td>\r\n                </tr>\r\n            )\r\n        }\r\n        return results.map((result, index) => {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <tr>\r\n                        <td> {index+1} </td>\r\n                        <td><code>{Helper.textEllipsis(result.email, 100)}</code> </td>\r\n                        <td> {Helper.textEllipsis(result.site, 100)} </td>\r\n                        <td>\r\n                            <CopyToClipboard \r\n                                text={result.email}\r\n                                onCopy={() => copyOnClickHandler(result.email)}\r\n                            >\r\n                                <button className={\"btn btn-rounded btn-icon btn-success\"}>\r\n                                    <i className=\"mdi mdi-content-paste\"></i>\r\n                                </button>\r\n                            </CopyToClipboard>\r\n                        </td>\r\n                    </tr>\r\n                </React.Fragment>\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n               <Navbar/>\r\n                <div className=\"container-fluid page-body-wrapper\">\r\n                    <div className=\"main-panel\">\r\n                        <div className=\"content-wrapper\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                            <LoadingOverlay\r\n                                            active={isLoading}\r\n                                            spinner\r\n                                            text='Scrapping...'\r\n                                        >\r\n                                            <div className=\"card-body text-center\">\r\n                                                <div className=\"forms-sample\">\r\n                                                    <label className=\"text-muted\">\r\n                                                        Enter one domain/URL per line Below And Press Start Scrapping\r\n                                                    </label>\r\n                                                    <div className=\"form-group\">\r\n                                                        <textarea id=\"site\" name=\"site\" onChange={(e) => { setSite(e.target.value) }} value={site} className=\"form-control\" placeholder='example.com &#10;example.com &#10;example.com' rows=\"6\"></textarea>\r\n                                                    </div>\r\n                                                    <button type=\"button\" disabled={isLoading} className=\"btn btn-gradient-info m-2\" onClick={optionOnClickHandler}>Option</button>\r\n                                                    <button type=\"button\" disabled={isLoading} className=\"btn btn-gradient-primary m-2\" onClick={startScrapOnClickHandler}>Start Scrapping{isLoading ? '...' : ''}</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </LoadingOverlay>\r\n                                    </div>\r\n                                </div>\r\n                                <If condition={!hideBottomPart}>\r\n                                <React.Fragment>\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                    <div className=\"card-body text-center\">\r\n                                        <h4 className=\"card-title\">Email Scrapped: {results.length}</h4>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-12 grid-margin stretch-card\">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-body\">\r\n                                            <div className=\"pt-3 pb-3\">\r\n                                                <div className=\"d-flex flex-column flex-md-row justify-content-md-between\">\r\n                                                    <div className=\"d-flex flex-row\">\r\n                                                        <OverlayTrigger\r\n                                                            placement={'top'}\r\n                                                            overlay={\r\n                                                                <BootStrapTooltip>\r\n                                                                    Copy All\r\n                                                                </BootStrapTooltip>\r\n                                                            }\r\n                                                        >\r\n                                                            <button disabled={!results.length} id=\"copy-all-button\" className=\"btn btn-inverse-info btn-icon\" onClick={() => copyAllOnClickHandler()}>\r\n                                                                <i className=\"mdi mdi-content-copy\"></i>\r\n                                                            </button>\r\n                                                        </OverlayTrigger>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"table-responsive\">\r\n                                                <table id='scrapped-email-table' className=\"table table-striped scrapped-email-table\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th> # </th>\r\n                                                            <th> Email </th>\r\n                                                            <th> Site </th>\r\n                                                            <th style={{width: '160px'}}> </th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {populateTableRow()}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                </React.Fragment>\r\n                                </If>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <If condition={openOptionPopup}>\r\n                <OptionPopup\r\n                    handleClose={toggleOptionPopup}\r\n                    options={options}\r\n                    setOptions={setOptions}\r\n                />\r\n            </If>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container-scroller\">\r\n                <div className=\"container-fluid page-body-wrapper full-page-wrapper\">\r\n                    <div className=\"content-wrapper d-flex align-items-center text-center error-page bg-primary\">\r\n                    <div className=\"row flex-grow\">\r\n                        <div className=\"col-lg-7 mx-auto text-white\">\r\n                        <div className=\"row align-items-center d-flex flex-row\">\r\n                            <div className=\"col-lg-6 text-lg-right pr-lg-4\">\r\n                            <h1 className=\"display-1 mb-0\">404</h1>\r\n                            </div>\r\n                            <div className=\"col-lg-6 error-page-divider text-lg-left pl-lg-4\">\r\n                            <h2>SORRY!</h2>\r\n                            <h3 className=\"font-weight-light\">The page you’re looking for was not found.</h3>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row mt-5\">\r\n                            <div className=\"col-12 text-center mt-xl-2\">\r\n                                <Link className=\"text-white font-weight-medium\" to={'/'}>Back to home</Link>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Error;","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport './assets/css/App.scss';\r\nimport Home from './components/Home';\r\nimport Error from './components/Error';\r\n\r\nfunction App() {\r\n\t\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\" component={Home}/>\r\n\t\t\t\t<Route component={Error}/>\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}